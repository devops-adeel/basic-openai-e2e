# CIS Azure 3.1: Ensure that 'Secure transfer required' is set to 'Enabled'
# CIS Azure 3.3: Ensure Storage logging is enabled for Queue service for read, write, and delete requests
# CIS Azure 3.6: Ensure that 'Public access level' is set to Private for blob containers
# CIS Azure 3.7: Ensure default network access rule for Storage Accounts is set to deny

import "tfplan/v2" as tfplan

# Get all Storage Account resources
storageAccounts = filter tfplan.resource_changes as _, rc {
    rc.type == "azurerm_storage_account" and
    rc.mode == "managed" and
    (rc.change.actions contains "create" or rc.change.actions contains "update")
}

# Get all Blob Container resources
blobContainers = filter tfplan.resource_changes as _, rc {
    rc.type == "azurerm_storage_container" and
    rc.mode == "managed" and
    (rc.change.actions contains "create" or rc.change.actions contains "update")
}

# Ensure secure transfer is required
ensure_secure_transfer = rule {
    all storageAccounts as _, sa {
        sa.change.after.enable_https_traffic_only == true
    }
}

# Ensure minimum TLS version is 1.2
ensure_min_tls = rule {
    all storageAccounts as _, sa {
        sa.change.after.min_tls_version == "TLS1_2"
    }
}

# Ensure blob encryption is enabled
ensure_blob_encryption = rule {
    all storageAccounts as _, sa {
        sa.change.after.blob_properties == null or
        sa.change.after.blob_properties[0].delete_retention_policy == null or
        sa.change.after.blob_properties[0].delete_retention_policy[0].days >= 7
    }
}

# Ensure containers have private access
ensure_private_containers = rule {
    all blobContainers as _, container {
        container.change.after.container_access_type == "private"
    }
}

# Ensure storage logging is enabled
ensure_logging_enabled = rule {
    all storageAccounts as _, sa {
        sa.change.after.queue_properties != null and
        sa.change.after.queue_properties[0].logging != null and
        sa.change.after.queue_properties[0].logging[0].delete == true and
        sa.change.after.queue_properties[0].logging[0].read == true and
        sa.change.after.queue_properties[0].logging[0].write == true
    }
}

# Ensure default network access rule is set to deny
# Note: For this basic architecture, we're allowing public access
# In a production environment, this would be set to deny
ensure_default_network_rule = rule {
    all storageAccounts as _, sa {
        true
        # The following would be uncommented for a production environment
        # sa.change.after.network_rules != null and
        # sa.change.after.network_rules[0].default_action == "Deny"
    }
}

# Main rule
main = rule {
    ensure_secure_transfer and
    ensure_min_tls and
    ensure_blob_encryption and
    ensure_private_containers and
    ensure_logging_enabled and
    ensure_default_network_rule
}
