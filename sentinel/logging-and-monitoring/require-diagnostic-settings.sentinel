# CIS Azure 5.1.3: Ensure that Diagnostic Logs are enabled for all services
# CIS Azure 5.1.5: Ensure that logging for Azure Key Vault is 'Enabled'

import "tfplan/v2" as tfplan

# List of Azure resource types that should have diagnostic settings
resourceTypesRequiringDiagnostics = [
    "azurerm_linux_web_app",
    "azurerm_windows_web_app",
    "azurerm_app_service",
    "azurerm_key_vault",
    "azurerm_cognitive_account",
    "azurerm_search_service",
    "azurerm_machine_learning_workspace"
]

# Get all the diagnostic settings being created
diagnosticSettings = filter tfplan.resource_changes as _, rc {
    rc.type == "azurerm_monitor_diagnostic_setting" and
    rc.mode == "managed" and
    (rc.change.actions contains "create" or rc.change.actions contains "update")
}

# Get all resources that should have diagnostic settings
resources = filter tfplan.resource_changes as _, rc {
    rc.type in resourceTypesRequiringDiagnostics and
    rc.mode == "managed" and
    (rc.change.actions contains "create" or rc.change.actions contains "update")
}

# For each resource, check if there is a diagnostic setting targeting it
ensure_diagnostic_settings = rule {
    all resources as _, resource {
        any diagnosticSettings as _, ds {
            ds.change.after.target_resource_id == resource.change.after.id
        }
    }
}

# Ensure diagnostic settings for Key Vault include audit events
ensure_key_vault_audit_events = rule {
    all diagnosticSettings as _, ds {
        ds.change.after.target_resource_id not matches "Microsoft.KeyVault/vaults" or
        all ds.change.after.log as _, log {
            log.category contains "AuditEvent" and log.enabled == true
        }
    }
}

# Ensure diagnostic settings include all metrics
ensure_metrics = rule {
    all diagnosticSettings as _, ds {
        ds.change.after.metric != null and
        length(ds.change.after.metric) > 0 and
        all ds.change.after.metric as _, metric {
            metric.category == "AllMetrics" and metric.enabled == true
        }
    }
}

# Ensure retention policy is configured
ensure_retention = rule {
    all diagnosticSettings as _, ds {
        all ds.change.after.log as _, log {
            log.retention_policy[0].enabled == true and
            log.retention_policy[0].days >= 30
        } and
        all ds.change.after.metric as _, metric {
            metric.retention_policy[0].enabled == true and
            metric.retention_policy[0].days >= 30
        }
    }
}

# Main rule
main = rule {
    ensure_diagnostic_settings and
    ensure_key_vault_audit_events and
    ensure_metrics and
    ensure_retention
}
